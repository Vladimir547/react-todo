[{"G:\\мои файлы\\Ger\\react-todo\\src\\index.js":"1","G:\\мои файлы\\Ger\\react-todo\\src\\reportWebVitals.js":"2","G:\\мои файлы\\Ger\\react-todo\\src\\App.js":"3","G:\\мои файлы\\Ger\\react-todo\\src\\reducer\\reducer.js":"4","G:\\мои файлы\\Ger\\react-todo\\src\\list\\ListWrapper\\List.js":"5","G:\\мои файлы\\Ger\\react-todo\\src\\components\\form\\Form.js":"6","G:\\мои файлы\\Ger\\react-todo\\src\\components\\listItem\\ListItem.js":"7","G:\\мои файлы\\Ger\\react-todo\\src\\actions\\actions.js":"8","G:\\мои файлы\\Ger\\react-todo\\src\\components\\modal\\modal.js":"9"},{"size":704,"mtime":1606835238249,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":704,"mtime":1606928080685,"results":"13","hashOfConfig":"11"},{"size":5053,"mtime":1606927092968,"results":"14","hashOfConfig":"11"},{"size":2154,"mtime":1606927171111,"results":"15","hashOfConfig":"11"},{"size":1608,"mtime":1606919091789,"results":"16","hashOfConfig":"11"},{"size":1784,"mtime":1606921133531,"results":"17","hashOfConfig":"11"},{"size":1583,"mtime":1606921612496,"results":"18","hashOfConfig":"11"},{"size":2814,"mtime":1606920334434,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"t1gio8",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"G:\\мои файлы\\Ger\\react-todo\\src\\index.js",[],["43","44"],"G:\\мои файлы\\Ger\\react-todo\\src\\reportWebVitals.js",[],"G:\\мои файлы\\Ger\\react-todo\\src\\App.js",[],"G:\\мои файлы\\Ger\\react-todo\\src\\reducer\\reducer.js",["45","46","47","48","49","50"],"const initialState = {\r\n    todo:[],\r\n    doing:[],\r\n    done:[],\r\n    delete:[],\r\n    isModalShow: false,\r\n    isEdit: false,\r\n    isView: false,\r\n    currentTask: []\r\n};\r\n\r\nfunction reducer ( state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'ADD_FROM_STORAGE':\r\n            return {\r\n                ...state,\r\n                [action.payload[1]]: action.payload[0]\r\n            };\r\n        case 'ADD': \r\n                localStorage.setItem(action.payload.which, JSON.stringify([...state[action.payload.which], {\r\n                    id: state[action.payload.which].length > 0 ? state[action.payload.which][state[action.payload.which].length - 1].id + 1 : 0,\r\n                    title: action.payload.title,\r\n                    discription: action.payload.discription\r\n                }]));\r\n            return {\r\n                ...state,\r\n                [action.payload.which]: [...state[action.payload.which], {\r\n                    id: state[action.payload.which].length > 0 ? state[action.payload.which][state[action.payload.which].length - 1].id + 1 : 0,\r\n                    title: action.payload.title,\r\n                    discription: action.payload.discription\r\n                }],\r\n            };\r\n        case 'SHOW_MODAL': \r\n            return {\r\n                ...state,\r\n                isModalShow: true,\r\n            };\r\n        case 'EDIT_MODAL': \r\n            return {\r\n                ...state,\r\n                isEdit: true,\r\n            }\r\n        case 'VIEW_TASK':\r\n            return {\r\n                ...state, \r\n                isView: true,\r\n            };\r\n        case 'CLOSE_MODAL':\r\n            return {\r\n                ...state, \r\n                isModalShow: false,\r\n                isView: false,\r\n                isEdit: false,\r\n            };\r\n        case 'SET_TASK':\r\n            return {\r\n                ...state,\r\n                currentTask: [action.payload[0], action.payload[1]],\r\n            };\r\n        case 'EDIT':\r\n            let stateTodo = state[action.payload.wrapper];\r\n            const cloneTodo = stateTodo.map((item) => {\r\n                if (item.id === action.payload.newItem.id) {\r\n                    return action.payload.newItem;\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n            localStorage.setItem(action.payload.wrapper, JSON.stringify(cloneTodo));\r\n            return {\r\n                ...state,\r\n                [action.payload.wrapper]: cloneTodo,\r\n            };\r\n        case 'MOVE_ITEM':\r\n            let nextWrapper = null;\r\n            const cloneWrap = [...state[action.payload.cont]];\r\n            const currantEl = cloneWrap.filter((item) => {\r\n                if (item.id === Number(action.payload.num)) {\r\n                    return item;\r\n                }\r\n            });\r\n            const newArray = cloneWrap.filter((item) => {\r\n                if (item.id !== Number(action.payload.num)) {\r\n                    return item;\r\n                }\r\n            });\r\n            if (action.payload.cont === 'todo') {\r\n                nextWrapper = 'doing';\r\n            }\r\n            if (action.payload.cont === 'doing') {\r\n                nextWrapper = 'done';\r\n            }\r\n            if (action.payload.cont === 'done') {\r\n                nextWrapper = 'todo';\r\n            }\r\n            if (action.payload.cont === 'delete') {\r\n                nextWrapper = 'todo';\r\n            }\r\n            currantEl[0].id = state[nextWrapper].length > 0 ? state[nextWrapper][state[nextWrapper].length - 1]. id + 1 : 0;\r\n            localStorage.setItem(action.payload.cont, JSON.stringify([...newArray]))\r\n            localStorage.setItem(nextWrapper, JSON.stringify([...state[nextWrapper], ...currantEl]));\r\n            return {\r\n                ...state,\r\n                [action.payload.cont]: [...newArray],\r\n                [nextWrapper]: [...state[nextWrapper], ...currantEl]\r\n            };\r\n        case 'DELETE':\r\n            const cloneWrapForDel = [...state[action.payload.cont]];\r\n            const currantElForDel = cloneWrapForDel.filter((item) => {\r\n                if (item.id === Number(action.payload.num)) {\r\n                    return item;\r\n                }\r\n            });\r\n            const newArrayForWrap = cloneWrapForDel.filter((item) => {\r\n                if (item.id !== Number(action.payload.num)) {\r\n                    return item;\r\n                }\r\n            });\r\n            currantElForDel[0].id = state.delete.length > 0 ? state.delete[state.delete.length - 1]. id + 1 : 0;\r\n            localStorage.setItem(action.payload.cont, JSON.stringify([...newArrayForWrap]))\r\n            localStorage.setItem('delete', JSON.stringify([...state.delete, ...currantElForDel]));\r\n            return {\r\n                ...state,\r\n                [action.payload.cont]: [...newArrayForWrap],\r\n                delete: [...state.delete, ...currantElForDel]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","G:\\мои файлы\\Ger\\react-todo\\src\\list\\ListWrapper\\List.js",["51","52"],"import React,{ useState, useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\n\r\nimport Form from '../../components/form/Form';\r\nimport ListItem from '../../components/listItem/ListItem';\r\nimport './List.css';\r\n\r\nconst List = (props) => {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector((state) => state[props.classProps]);\r\n    const [ formClass, setFormClass ] = useState('todo__form-none');\r\n    const [ todoAddClass, setTodoAddClass ] = useState('todo__add-show')\r\n    const isntDelete = props.classProps !== 'delete';\r\n    useEffect(() => {\r\n        const arrFromStorage = JSON.parse(localStorage.getItem(props.classProps))\r\n        if (tasks.length === 0 && arrFromStorage !== null) {\r\n            dispatch({type: 'ADD_FROM_STORAGE', payload: [arrFromStorage, props.classProps]});\r\n        }\r\n    }, []);\r\n    const showForm = (e) => {\r\n        e.preventDefault();\r\n        if (formClass === 'todo__form-none' && todoAddClass === 'todo__add-show') {\r\n            setTodoAddClass('todo__add-none');\r\n            setFormClass('todo__form-show');\r\n        } else {\r\n            setTodoAddClass('todo__add-show');\r\n            setFormClass('todo__form-none')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo__wrapper\">\r\n            <div className=\"todo__title\">\r\n                <h3>{props.classProps}</h3>\r\n            </div>\r\n            <div className={`${props.classProps} tasks`}>\r\n                {tasks.map((item, index) => {\r\n                    return (\r\n                        <ListItem key={`${index}${item.title}`} itemText={item} itemIndex={item.id} whichState ={props.classProps} />\r\n                    );\r\n                })}    \r\n            </div>\r\n                <Form formClass={formClass} showForm={(e) => showForm(e)} whichState={props.classProps} />\r\n\r\n            {\r\n                isntDelete &&\r\n                <div className={todoAddClass}>\r\n                    <a href=\"\" className=\"add__btn\" onClick={(e) => showForm(e)}><i className=\"icon-plus\"></i> add card</a>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default List;","G:\\мои файлы\\Ger\\react-todo\\src\\components\\form\\Form.js",[],"G:\\мои файлы\\Ger\\react-todo\\src\\components\\listItem\\ListItem.js",[],["53","54"],"G:\\мои файлы\\Ger\\react-todo\\src\\actions\\actions.js",[],"G:\\мои файлы\\Ger\\react-todo\\src\\components\\modal\\modal.js",["55","56"],"import React,{ useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { actionCloseModal, actionEditTask } from '../../actions/actions';\r\nimport './modal.css';\r\n\r\nconst Modal = () => {\r\n    const dispatch = useDispatch();\r\n    const isEdit = useSelector((state) => state.isEdit);\r\n    const isView = useSelector((state) => state.isView);\r\n    const currentTask = useSelector((state) => state.currentTask);\r\n    const index = currentTask[0];\r\n    const wrapper = currentTask[1];\r\n    const task = useSelector((state) => {\r\n        return state[wrapper].filter((item) => {\r\n            if (Number(index) === item.id) {\r\n                return item;\r\n            }\r\n        });\r\n    });\r\n    const [ title, setTitle ] = useState(task[0].title);\r\n    const [ description, setDescription ] = useState(task[0].discription);\r\n    const closeModal = (e) => {\r\n        e.preventDefault();\r\n        setTitle('');\r\n        setDescription('');\r\n        dispatch(actionCloseModal());\r\n    };\r\n    const editTask = (e) => {\r\n        e.preventDefault();\r\n        dispatch(actionEditTask({wrapper: wrapper, num: index, newItem: {id: task[0].id, title: title, discription: description}}));\r\n        setTitle('');\r\n        setDescription('');\r\n        dispatch(actionCloseModal());\r\n    };\r\n    return (\r\n        \r\n        <div className=\"modal-wrapper\">\r\n            <div className=\"modal\">\r\n                {\r\n                    isView && !isEdit &&\r\n                    <div className='modal-content'>\r\n                        <p >title: <span id=\"modal-title\">{title}</span></p>\r\n                        <p>description: <span id=\"modal-description\"> {description}</span></p>\r\n                    </div>\r\n                }\r\n                {\r\n                    !isView && isEdit &&\r\n                    <form action=\"\" className=\"edit-form\" onSubmit={(e) => editTask(e)}>\r\n                        <label htmlFor=\"edit-form__title\"> Edit title</label>\r\n                        <input type=\"text\" id=\"edit-form__title\" name=\"editName\" placeholder=\"edit the title for this card\" onChange={(e) => setTitle(e.target.value)} value={title} />\r\n                        <label htmlFor=\"edit-form__description\"> Edit description</label>\r\n                        <textarea id=\"edit-form__description\" name=\"editName\" onChange={(e) => setDescription(e.target.value)} value={description} placeholder=\"edit the description for this card\"></textarea>\r\n                        <input type=\"submit\" name=\"edit\" value=\"edit\" id=\"edit-form__submit\" />\r\n                    </form>\r\n                }\r\n                <a href=\"\" className='modal-close' onClick={closeModal}><i className='icon-close' onClick={(e) => closeModal(e)}></i></a>\r\n            </div>\r\n\t    </div>\r\n    );\r\n};\r\n\r\nexport default Modal;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":77,"column":55,"nodeType":"63","messageId":"64","endLine":77,"endColumn":57},{"ruleId":"61","severity":1,"message":"62","line":82,"column":54,"nodeType":"63","messageId":"64","endLine":82,"endColumn":56},{"ruleId":"65","severity":1,"message":"66","line":99,"column":63,"nodeType":"67","messageId":"68","endLine":99,"endColumn":116,"fix":"69"},{"ruleId":"61","severity":1,"message":"62","line":109,"column":67,"nodeType":"63","messageId":"64","endLine":109,"endColumn":69},{"ruleId":"61","severity":1,"message":"62","line":114,"column":67,"nodeType":"63","messageId":"64","endLine":114,"endColumn":69},{"ruleId":"65","severity":1,"message":"66","line":119,"column":63,"nodeType":"67","messageId":"68","endLine":119,"endColumn":104,"fix":"70"},{"ruleId":"71","severity":1,"message":"72","line":19,"column":8,"nodeType":"73","endLine":19,"endColumn":10,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":48,"column":21,"nodeType":"77","endLine":48,"endColumn":82},{"ruleId":"57","replacedBy":"78"},{"ruleId":"59","replacedBy":"79"},{"ruleId":"61","severity":1,"message":"62","line":15,"column":45,"nodeType":"63","messageId":"64","endLine":15,"endColumn":47},{"ruleId":"75","severity":1,"message":"76","line":57,"column":17,"nodeType":"77","endLine":57,"endColumn":73},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-whitespace-before-property","Unexpected whitespace before property id.","MemberExpression","unexpectedWhitespace",{"range":"82","text":"83"},{"range":"84","text":"83"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'props.classProps', and 'tasks.length'. Either include them or remove the dependency array.","ArrayExpression",["85"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["80"],["81"],"no-global-assign","no-unsafe-negation",[3578,3580],".",[4575,4577],{"desc":"86","fix":"87"},"Update the dependencies array to be: [dispatch, props.classProps, tasks.length]",{"range":"88","text":"89"},[855,857],"[dispatch, props.classProps, tasks.length]"]